#!/usr/bin/perl -w
# Very simple program to manually tak to an ADB server
# useful to better understand the protocol
use strict;
use warnings;

our $VERSION = "1.000";

use FindBin qw($Script);
our $Bin;

# If the program runs as /foobar/bin/program, find libraries in /foobar/lib
BEGIN {
    # Even on windows FindBin uses / in the reported path
    $Bin = $FindBin::Bin;
    $Bin =~ s{/+\z}{};
    $Bin =~
        ($^O eq "MSWin32" ?
         qr{^((?:[A-Z]:)?(?:/[a-zA-Z0-9_:.~ -]+)*)/[a-zA-Z0-9_.-]+/*\z} :
         qr{^((?:/[a-zA-Z0-9_:.-]+)*)/[a-zA-Z0-9_.-]+/*\z}) ||
         die "Could not parse bin directory '$Bin'";
    # Use untainted version of lib
    require lib;
    # Support a simple --blib option for pre-install testing
    "lib"->import(@ARGV && $ARGV[0] eq "--blib" ? shift && "$1/blib/lib" : "$1/lib");
}

use Errno qw(EAGAIN EINTR EWOULDBLOCK);
use IO::Socket::IP qw();
use Getopt::Long 2.24 qw(:config bundling);

use Term::ReadLine;

use ADB::Client::Events qw(mainloop unloop event_init);
use ADB::Client::Utils qw(get_home string_from_value $ADB_HOST $ADB_PORT);

my $prompt = "";
die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("host|h|H=s"	=> \my $host,
               "port|p|P=s"	=> \my $port,
           );
die "$Script doesn't take arguments\n" if @ARGV;
$host //= $ADB_HOST;
$port //= $ADB_PORT;

my $home = get_home();
my $history_file = "$home/.history_adb_tester";

my $term = Term::ReadLine->new($Script);
my $IN  = $term->IN  || die "No IN";
my $OUT = $term->OUT || die "No OUT";
$term->event_loop(\&mainloop);
$term->read_history($history_file);
# $term->stuff_char(10);

my $socket = IO::Socket::IP->new(
    PeerHost => $host,
    PeerPort => $port) || die "Could not connect to $host:$port: $@";
print $OUT "Connected to $host:$port\n";

my $command_in = "";
my $command_out = "";
my $socket_out = "";
my $sync = 0;

sub unstring {
    my $str = string_from_value(shift);
    $str =~ s/^"//;
    $str =~ s/"\z//;
    return $str;
}

sub socket_writer {
    my $rc = syswrite($socket, $socket_out, 2**16);
    if ($rc) {
        substr($socket_out, 0, $rc, "");
        $socket->delete_write() if $socket_out eq "";
        return;
    }
    die "Length 0 write" if defined $rc;
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    die "Error writing to socket: $^E";
}

sub command_process {
    while ($command_in =~ s/(.*)\n//) {
        my $line = $1;
        # $line =~ s/^\s+//;
        # $line =~ s/\s+\z//;
        if ($line eq "") {
            print $OUT "\n";
            next;
        }
        utf8::downgrade($line);
        my $len = length $line;
        die "Line too long" if $len >= 2**16;
        $socket->add_write(\&socket_writer) if $socket_out eq "";
        if ($sync) {
            my $cmd = substr($line, 0, 4, "");
            $line = pack("a*V/a*", $cmd, $line);
        } else {
            $sync = 1 if $line =~ /^sync(?::|\z)/;
            $line = sprintf("%04x", $len) . $line;
        }
        my $out = string_from_value($line);
        print $OUT "-> adb\n$out\n";
        $socket_out .= $line;
    }
}

sub command_reader {
    unloop();
    return;
    my $rc = sysread($IN, my $buffer, 2**16);
    if ($rc) {
        $command_in .= $buffer;
        command_process();
        return;
    }
    exit if defined $rc;
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    die "Error reading from STDIN: $^E";
}

sub socket_reader {
    my $rc = sysread($socket, my $buffer, 2**16);
    if ($rc) {
        $buffer = unstring($buffer);
        print $OUT "<- adb\n$buffer\n";
        return;
    }
    if (defined $rc) {
        print $OUT "<- adb: Close\n";
        $socket->delete_read;
        $socket->delete_write if $socket_out ne "";

        $socket = IO::Socket::IP->new(
            PeerHost => $host,
            PeerPort => $port) || die "Could not connect to $host:$port: $@";
        $socket->blocking(0);
        $sync = 0;
        $socket_out = "";
        $socket->add_read(\&socket_reader);
        print $OUT "-> adb: Connect\n";
        return;
    }
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    die "Error reading from socket: $^E";
}

event_init;
$IN->blocking(0);
($IN)->add_read(\&command_reader);
$socket->blocking(0);
$socket->add_read(\&socket_reader);
# mainloop();
while (1) {
    my $line = $term->readline($prompt) // last;
    $command_in .= "$line\n";
    command_process();
}
$term->write_history($history_file);

END {
    local $?;
    $term->rl_deprep_terminal() if $term;
    #delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};
    #$ENV{PATH}="/usr/bin:/bin";
    #system("stty", "sane");
}
