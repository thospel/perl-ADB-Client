#!/usr/bin/perl -w

my $sleep;
BEGIN {
    $sleep = $ENV{ADB_FAKE_SLEEP} || 0;
    if ($sleep < 0) {
        # Do this as early as possible in the hope that TERM won't arrive
        # before we set the signal handler
        $SIG{TERM} = "IGNORE";
        $sleep = -$sleep;
    }
}

use strict;
use warnings;

our $VERSION = "1.000";

use FindBin qw($Script);
our $Bin;

# If the program runs as /foobar/bin/program, find libraries in /foobar/lib
BEGIN {
    # Even on windows FindBin uses / in the reported path
    $Bin = $FindBin::Bin;
    $Bin =~ s{/+\z}{};
    $Bin =~
        ($^O eq "MSWin32" ?
         qr{^((?:[A-Z]:)?(?:/[a-zA-Z0-9_:.~ -]+)*)/[a-zA-Z0-9_.-]+/*\z} :
         qr{^((?:/[a-zA-Z0-9_:.-]+)*)/[a-zA-Z0-9_.-]+/*\z}) ||
         die "Could not parse bin directory '$Bin'";
    # Use untainted version of lib
    require lib;
    # Support a simple --blib option for pre-install testing
    "lib"->import(@ARGV && $ARGV[0] eq "--blib" ? shift && "$1/blib/lib" : "$1/lib");
}

use IO::Socket qw(IPPROTO_TCP TCP_NODELAY);
use IO::Socket::IP qw();
use Scalar::Util qw(weaken refaddr);
use Getopt::Long 2.24 qw(:config bundling);
use POSIX qw(_exit);
use Errno qw(EAGAIN EINTR EWOULDBLOCK);
use Data::Dumper;

use ADB::Client::Events qw(mainloop timer event_init);
use ADB::Client::Utils qw(info display_string ip_port_from_addr IPV6);

use constant {
    CONTROL	=> 0,	# Control port
    LISTENER	=> 1,	# Normal fake adb server
    UNACCEPTABLE=> 2,	# Doesnt' even accept connections (OS will accept)
    UNREACHABLE	=> 3,	# Occupies a port but refuses connection (no listen)
    BLACKHOLE	=> 4,	# Eats everything on the accepted connection. Can talk
    CLOSER	=> 5,	# Closes the connection as soon as n bytes are sent
    ECHO	=> 6,	# Echoes whatever you type

    NULL	=> "/dev/null",
};

my $IDLE_TIMEOUT = 10;

$| = 1;

my $Listen = "tcp:localhost:5037";
my @argv_old = @ARGV;
die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("a!"		=> \my $all,
               "L=s"		=> \$Listen,
               "reply-fd=o"	=> \my $reply_fd,
               "acceptfd=o"	=> \my $accept_fd,
               # Non standard options
               "verbose|v!"	=> \my $verbose,
               "timeout|t=o"	=> \my $idle_timeout,
           );
$idle_timeout //= $verbose ? 1200 : $IDLE_TIMEOUT;

# Little set of model devices
my @init_devices = qw(10.253.0.13:5555 52000c4748d6a283);
my %devices = (
    "10.253.0.13:5555" => [
        "device",
        "product:zerofltexx model:SM_G920F device:zeroflte",
        [qw(fixed_push_mkdir shell_v2 apex stat_v2 abb fixed_push_symlink_timestamp cmd abb_exec zorro)]],
    "52000c4748d6a283" => [
        "device",
        "usb:1-1.2 product:lineage_kminilte model:SM_G800F device:kminiltexx",
        [qw(shell_v2 cmd stat_v2 wabbits)]],
    "10.253.0.11:1234" => [
        "device",
        "product:lineage_kminilte model:SM_G800F device:kminiltexx",
        [qw(shell_v2 cmd stat_v2 martians)]],
    "0715f712da553032" => [
        "device",
        "usb:1-1.3 product:zerofltexx model:SM_G920F device:zeroflte",
    ],
);
# my @host_features = qw(shell_v2cmd push_sync stat_v2);
my @host_features = qw(shell_v2 cmd stat_v2 ls_v2 fixed_push_mkdir apex abb fixed_push_symlink_timestamp abb_exec remount_shell track_app sendrecv_v2 sendrecv_v2_brotli sendrecv_v2_lz4 sendrecv_v2_zstd sendrecv_v2_dry_run_send push_sync);
my %host_features = map(($_ => 1), @host_features);

# Make sure we will quit by ourselves after inactivity so testing won't get
# stuck in case of errors in adb_fake
my $accepted = my $listening = my $nr_devices = 0;
my ($finish, $idle_timer, %listeners, %specials, @sockets);

our $BLOCK_SIZE = 65536;
# Default ADB version for plain adb_fake
our $ADB_VERSION = 39;
# Default ADB version for adb_fake with arguments (called like real adb)
our $ADB_VERSION2 = 30;
our $TIMEOUT	= 2;

sub acceptable {
    my ($listener) = @_;

    my $addr = accept(my $socket, $listener->{socket});
    if (!$addr) {
        return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
        die "Accept error: $^E";
    }
    unidle();
    $socket->blocking(0);
    setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1) ||
        die("Could not set TCP_NODELAY on accepted socket: $^E");
    my $class = $listener->{type} == CONTROL ? "Control" : "ADB";
    my $state = $class->new($socket, $listener->{type}, $listener->next_id);
    weaken($state->{listener} = $listener);
    $listener->{accepted}{$state->{key}} = $state;
    weaken(my $s = $state);
    $socket->add_read(sub { $s->reader });
    $state->output($listener->{arg}) if
        $listener->{type} == BLACKHOLE && $listener->{arg} ne "";
    $state->output("adb_fake $VERSION\n") if $listener->{type} == CONTROL;
    $state->adb_close if $listener->{type} == CLOSER && $listener->{arg} <= 0;
}

sub add_listener {
    my ($type, $arg, $host, $port) = @_;
    $type = shift // LISTENER;

    $host ||= "127.0.0.1";
    $port ||= 0;
    my $socket = defined fileno $port ? $port :
        IO::Socket::IP->new(
            $type == UNREACHABLE ? () : (Listen => 5),
            V6Only	=> 0,
            ReuseAddr	=> 1,
            LocalHost	=> $host,
            LocalPort	=> $port) ||
            die "Could not create listening socket $host:$port: $^E";
    # Workaroud for bind bug in IO::Socket::IP
    # (failing bind does not lead to fatal error, seen in verson 0.39)
    # And we want to set blocking 0 for acceptfd anyways
    $socket->blocking(0);
    my $addr = getsockname($socket) || die "Could not getsockname: $^E";
    $port = (ip_port_from_addr($addr))[1];
    my $key = refaddr($socket);
    my $listener = bless {
        key		=> $key,
        ids		=> 0,
        socket		=> $socket,
        port		=> $port,
        accepted	=> {},
        device_events	=> {},
        type		=> $type,
        arg		=> $arg,
        $type == LISTENER ? (version => $arg // $ADB_VERSION) : (),
    }, "Listener";
    ++$listening;
    if ($type == LISTENER) {
        $listeners{$key} = $listener;
        $listener->devices_init;
    } else {
        $specials{$key} = $listener;
    }
    if ($type != UNACCEPTABLE && $type != UNREACHABLE) {
        weaken(my $l = $listener);
        $socket->add_read(sub { acceptable($l) });
    }
    return $listener->{port};
}

sub finish {
    info("finish") if $verbose;
    $finish = 1;
    $idle_timer = undef;
    %specials = ();
    %listeners = ();
}

sub timed_out {
    print STDERR "Timed out after $idle_timeout seconds of inactivity\n";
    finish();
}

sub unidle {
    $idle_timer = timer($idle_timeout, \&timed_out);
}

sub dumper {
    my ($msg, $data) = @_;

    local $Data::Dumper::Indent	  = 1;
    local $Data::Dumper::Sortkeys = 1;
    local $Data::Dumper::Useqq	  = 1;
    local $Data::Dumper::Terse    = 1;

    $msg ||= "Data";
    return "$msg: " . Dumper($data);
}

my $sleeper;
sub daemon {
    $reply_fd //
        die "reply fd for adb server to client communication not specified.\n";
    $reply_fd =~ /^\d+\z/a ||
        die "reply_fd '$reply_fd' is not a natural number\n";
    open(my $reply, ">&=", $reply_fd) ||
        die "Could not fdopen $reply_fd: $^E\n";
    $reply->autoflush(1);

    open(STDOUT, ">", NULL) ||
        die "Could not open '" . NULL . "' as STDOUT: $^E";
    open(STDIN, "<", NULL) ||
        die "Could not open '" . NULL . "' as STDIN: $^E";

    if (my $log_path = $ENV{ANDROID_ADB_LOG_PATH} // NULL) {
        open(my $fh, ">", $log_path) || die "open($log_path): $^E\n";
        open(STDERR, ">&", $fh) || die "Cannot dup to STDERR: $^E";
        close($fh) || die "Could not close($log_path): $^E";
    }
    STDERR->autoflush(1);

    # Simulate an error
    my $err = $ENV{ADB_FAKE_ERROR};
    die $err if $err;

    my $port;
    if (my ($host, $p) = $Listen =~ m{^tcp:(?:(.*):)?(\d+)\z}a) {
        $host //= "localhost";
        $host eq "localhost" ||
            die "error: could not install *smartsocket* listener: listening on specified hostname currently unsupported (@argv_old)\n";
        $port = $p;
    } elsif (my ($fd) = $Listen =~ m{^acceptfd:(\d+)\z}a) {
        open($port, "<&=", $fd) || die "Could not fdopen $fd: $^E";
    } else {
        die "error: could not install *smartsocket* listener: unknown socket specification '$Listen'\n";
    }

    my $ip =
        !$all ? "127.0.0.1" :
        IPV6 ? "::" :
        "0.0.0.0";
    $sleeper = timer($sleep, sub {
        add_listener(LISTENER, $ADB_VERSION2, $ip, $port);
        print($reply "OK\n") || die "Could not write to fd $reply_fd: $^E";
        close($reply) || die "Could not close fd $reply_fd: $^E";
    });
    mainloop();
}

sub main {
    if (@ARGV) {
        daemon();
    } else {
        my $port = add_listener(CONTROL);
        print("Port: $port\n") || die "print: $^E";
        mainloop();
        print("Close: $listening $accepted $nr_devices\n") || die "print: $^E";
    }
}

package Accepted;
use Scalar::Util qw(weaken);
use Errno qw(ECONNRESET EAGAIN EINTR EWOULDBLOCK);

use ADB::Client::Utils qw(info string_from_value);
use ADB::Client::Events qw(timer);

sub reader {
    my ($state) = @_;

    my $rc = sysread($state->{socket}, my $buffer, $BLOCK_SIZE);
    if ($rc) {
        ::unidle();
        $state->{in} .= $buffer;
        eval {
            $state->{on_read}->($state, $rc);
        };
        $state->{on_error}->($state, $@) if $@;
        return $rc;
    }
    if (defined $rc || $! == ECONNRESET) {
        ::unidle();
        # EOF
        $state->{on_close}->($state, defined $rc ? 0 : $!);
        return;
    }
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    ::unidle();
    die "Read error: $^E";
}

sub writer {
    my ($state) = @_;

    my $rc = syswrite($state->{socket}, $state->{out}, $BLOCK_SIZE);
    if ($rc) {
        ::unidle();
        my $written = substr($state->{out}, 0, $rc, "");
        info("Response(%s) > \t%s", $state->{id}, string_from_value($written)) if
            $verbose && $state->isa("ADB");;
        if ($state->{out} eq "") {
            $state->{socket}->delete_write();
            $state->{timeout} = undef;
        }
        if (my $written = delete $state->{written}) {
            weaken($state);
            $written->($state);
        }
        return;
    }
    # Dunno how to handle this.
    # Is it even possible ? Never found an answer
    die "Assertion: Length 0 write" if defined $rc;
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    ::unidle();
    die "Write error: $^E";
}

sub output {
    my $state = shift;

    return if $state->{written};

    my $str = join("", @_);
    return if $str eq "";
    # Should always be downgraded, but let's be paranoid
    die "Unexpected upgrade string" if utf8::is_utf8($str);

    if ($state->{out} eq "") {
        weaken(my $s = $state);
        $state->{socket}->add_write(sub { $s->writer });
        $state->{timeout} = timer($state->{write_timeout}, sub { $s->{on_error}->($s, "Write timed out") });
    }
    $state->{out} .= $str;
}

sub DESTROY {
    # print STDERR "DESTROY(@_)\n";
    my ($state) = @_;

    # Rescue sockets so they will get closed by the final _exit
    push @sockets, $state->{socket} if $finish;
    $state->{socket}->delete_write if $state->{out} ne "";
    $state->{socket}->delete_read;
    $state->{timeout} = undef;

    --$accepted;
}

sub dumper {
    my ($accepted, $msg) = @_;

    local $accepted->{listener} = "<listener>";
    $msg ||= "Accepted";
    $accepted->output(::dumper($msg, $accepted));
}

package Control;
use Scalar::Util qw(refaddr);

our @ISA = qw(Accepted);

sub new {
    my ($class, $socket) = @_;

    ++$accepted;
    return bless {
        key		=> refaddr($socket),
        socket		=> $socket,
        in		=> "",
        out 		=> "",
        on_read		=> \&control_read,
        on_close	=> \&::finish,
        on_error	=> sub { die $_[1]},
        write_timeout	=> $TIMEOUT,
    }, $class;
}

sub control_read {
    my ($state) = @_;

    while ($state->{in} =~ s/^[^\S\n]*(.*?)[^\S\n]*\n//) {
        my $command = lc($1);
        my $port;
        if ($command =~ m{listener(?:\s+(\d+))?\z}) {
            $port = ::add_listener(::LISTENER, $1 // $ADB_VERSION);
        } elsif ($command =~ m{listener6(?:\s+(\d+))?\z}) {
            $port = ::add_listener(::LISTENER, $1 // $ADB_VERSION, "::1");
        } elsif ($command =~ m{listener0(?:\s+(\d+))?\z}) {
            $port = ::add_listener(::LISTENER, $1 // $ADB_VERSION, "::");
        } elsif ($command eq "unacceptable") {
            $port = ::add_listener(::UNACCEPTABLE);
        } elsif ($command eq "unacceptable6") {
            $port = ::add_listener(::UNACCEPTABLE, undef, "::1");
        } elsif ($command eq "unreachable") {
            $port = ::add_listener(::UNREACHABLE);
        } elsif ($command eq "unreachable6") {
            $port = ::add_listener(::UNREACHABLE, undef, "::1");
        } elsif ($command =~ m{^blackhole(?:\s(.*))?\z}) {
            my $arg = $1 // "";
            $arg =~ s/\\n/\n/g;
            $port = ::add_listener(::BLACKHOLE, $arg);
        } elsif ($command =~ m{closer(?:\s+(\d+))?\z}) {
            $port = ::add_listener(::CLOSER, $1 // 0);
        } elsif ($command eq "echo") {
            $port = ::add_listener(::ECHO);
        } elsif ($command eq "echo6") {
            $port = ::add_listener(::ECHO, undef, "::1");
        } elsif ($command eq "dump") {
            $state->dumper("State");
            return;
        } elsif ($command eq "quit") {
            ::finish();
            return;
        } elsif ($command eq "help") {
            $state->output("Valid commands (case insensitive):
Listener  [version]	Start a listener on 127.0.0.1
Listener6 [version]	Start a listener on ::1
Listener0 [version]	Start a listener on ::
Unacceptable		Start a listening port on 127.0.0.1 without accept handler
Unacceptable6		Start a listening port on ::1 without accept handler
Unreachable		Start a non-listening port on 127.0.0.1
Unreachable6		Start a non-listening port on ::1
BlackHole [greeting]	Start a listener on 127.0.0.1 that only reads
Closer [n]		Start a listener on 127.0.0.1 that closes after reading n bytes
Echo			Start a listener on 127.0.0.1 that echoes everything
Echo6			Start a listener on ::1 that echoes everything
Quit			Exit the program (not just the control connection)
Help			Show this help
Dump			Dump the current state

All listeners behave like independent ADB servers
");
            return;
        } elsif ($command eq "") {
            return;
        } else {
            $state->output("Unknown: <$command>\n");
            return;
        }
        $state->output("Port: $port\n");
    }
}

package ADB;
use Scalar::Util qw(refaddr weaken);
use Carp;

# use ADB::Client::Utils qw(callers);
use ADB::Client::Utils qw(display_string info);

our @ISA = qw(Accepted);

use constant {
    FAIL	=> 0,
    OKAY	=> 1,
    UNCOUNTED	=> 2,
};

sub new {
    my ($class, $socket, $type, $id) = @_;

    ++$accepted;
    return bless {
        key		=> refaddr($socket),
        id		=> $id,
        socket		=> $socket,
        in		=> "",
        out 		=> "",
        on_read		=>
        $type == ::LISTENER	? \&adb_read :
        $type == ::CLOSER	? \&adb_closer :
        $type == ::ECHO		? \&adb_echo :
        \&adb_discard,
        on_error	=> \&adb_error,
        on_close	=> \&adb_close,
        write_timeout	=> $TIMEOUT,

        transport	=> 0,
    }, $class;
}

sub adb_error {
    my ($state, $err) = @_;

    warn($err);
    $state->adb_close;
}

sub adb_close {
    my ($state) = @_;

    # print STDERR "ADB CLOSE ", callers();
    delete $state->{listener}{accepted}{$state->{key}};
    delete $state->{listener}{device_events}{$state->{key}};
}

sub adb_discard {
    my ($state, $rc) = @_;

    $state->{in} = "";
}

sub adb_closer {
    my ($state, $rc) = @_;

    $state->adb_close if length($state->{in}) >= $state->{listener}{arg};
}

sub adb_echo {
    my ($state, $rc) = @_;

    $state->output($state->{in});
    $state->{in} = "";
}

sub adb_read {
    my ($state, $rc) = @_;

    my $len = length $state->{in};
    while ($state->{in} ne "") {
        # For convenient debugging with telnet...
        next if $state->{in} =~ s/^[\r\n]+//;
        length $state->{in} >= 4 || return;
        my $code = substr($state->{in}, 0, 4);
        $code =~ /^[0-9a-fA-F]{4}\z/ ||
            die "Invalid length code: ", display_string($code);
        my $len = hex $code;
        length $state->{in} >= 4 + $len || return;
        my $command = substr($state->{in}, 0, 4 + $len, "");
        substr($command, 0, 4, "");
        $state->adb_command($command);
        if ($state->{on_read} != \&adb_read) {
            if ($state->{in} ne "") {
                $rc -= $len - length $state->{in};
                $state->{on_read}->($state, $rc);
            }
            last;
        }
    }
}

sub adb_output {
    my ($state, $status, $response, $keep_open) = @_;

    return if $state->{written};
    if (defined $status) {
        if ($status == UNCOUNTED) {
            $state->output("OKAY" . $response);
        } else {
            $state->output(
                ($status ? "OKAY" : "FAIL"),
                sprintf("%04X", length $response),
                $response);
            $state->{written} = \&adb_close;
        }
        $state->{written} = $keep_open && $status != FAIL ? undef : \&adb_close;
    } else {
        # Close after OKAY send (used by host:kill)
        $state->output("OKAY");
        weaken(my $listener = $state->{listener});
        $state->{written} = sub { $listener->close if $listener};
    }
}

sub transport_type_name {
    my ($type, $many) = @_;

    return $many ? "devices/emulators" : "device/emulator" if $type eq "any";
    return $many ? "devices/emulators" : "device/emulator" if $type eq "tcp";
    return $many ? "devices"           : "device"          if $type eq "usb";
    return $many ? "emulators"         : "emulator"        if $type eq "local";
    die "Unknown transport type '$type'";
}

sub adb_command {
    my ($state, $command) = @_;
    info("Command (%s) <\t'%s'", $state->{id}, $command) if $verbose;

    if ($command =~ m{^host(-usb|-local|-transport-id:(\d+)|-serial:([^:]*(?::\d+)?)|):(.*)\z}a) {
        $state->command_host(
            $1 eq ""		? "any" :
            $1 eq "-usb"	? "usb" :
            $1 eq "-local"	? "local" :
            defined $2		? "id" :
            defined $3		? "serial" :
            croak("Impossible type $1"), $2, $3, $4);
    } elsif ($command =~ m{^internal:(.*)\z}s) {
        # Non standard adb commands for testing
        $state->command_internal($1);
    } elsif ($state->{transport}) {
        # Have transport
        $state->command_transporter($command);
    } else {
        $state->adb_output(FAIL, "device offline (no transport)");
    }
}

sub command_host {
    my ($state, $type, $id, $serial, $command) = @_;

    # Make transport more like tport
    $command =~ s/^transport:/transport:serial:/;
    $command =~ s/^transport-/transport:/;

    my $listener = $state->{listener};
    if ($command eq "version") {
        $state->adb_output(OKAY, sprintf("%04X", $listener->{version}));
    } elsif ($command eq "kill") {
        $state->adb_output;
    } elsif ($command eq "devices") {
        $state->adb_output(OKAY, $listener->{devices}->string);
    } elsif ($command eq "devices-l") {
        $state->adb_output(OKAY, $listener->{devices}->string_long);
    } elsif ($command eq "track-devices") {
        $state->adb_output(OKAY, $listener->{devices}->string, 1);
        # Become a tracker
        $state->{transport} = 0;
        $listener->{device_events}{$state->{key}} = $state;
        $state->{on_device_event} = \&tracker,
        $state->{on_read} = \&adb_close;
    } elsif ($command eq "host-features") {
        $state->adb_output(OKAY, join "," => @host_features);
    } elsif ($command =~ m{^(?:features|get-serialno|get-state|get-devpath)\z}) {
        #$listener->{devices}->dumper;
        my @devices = $listener->{devices}->transport($type, $id, $serial, $state->{transport});
        if (@devices == 1) {
            if ($devices[0]->offline) {
                my $offline = $devices[0]->state;
                $state->adb_output(FAIL, "device $offline");
            } else {
                my $device = $devices[0];
                if ($command eq "features") {
                    $state->adb_output(OKAY, $device->features_string);
                } elsif ($command eq "get-devpath") {
                    $state->adb_output(OKAY, $device->usb // "unknown");
                } elsif ($command eq "get-serialno") {
                    $state->adb_output(OKAY, $device->serial);
                } elsif ($command eq "get-state") {
                    $state->adb_output(OKAY, $device->state);
                } else {
                    die "Assertion: Unhandled command '$command'";
                }
            }
        } elsif (@devices) {
            my $name = transport_type_name($type, 0);
            $state->adb_output(FAIL, "more than one $name");
        } elsif (defined $id) {
            $state->adb_output(FAIL, "no device with transport id '$id'");
        } elsif (defined $serial) {
            $state->adb_output(FAIL, "device '$serial' not found");
        } else {
            my $name = transport_type_name($type, 1);
            $state->adb_output(FAIL, "no $name found");
        }
    } elsif ($command =~ m{^wait-for-(any|usb|local)-(device|recovery|rescue|sideload|bootloader|disconnect)\z}) {
        my $type  = $1 || $type;
        my $mode = $2;

        # disconnect is special since it tests a negative
        # Any "local" connections counts as disconnected
        # Multiple matches count as disconnected
        # So if you have one usb device connected and then connect another one
        # suddenly host:wait-for-usb-disconnect will return!
        $state->output("OKAY");
        my @devices = $listener->{devices}->transport($type, $id, $serial);
        if (@devices > 1) {
            if ($mode eq "disconnect") {
                $state->adb_output(UNCOUNTED, "");
            } else {
                my $name = transport_type_name($type, 0);
                $state->adb_output(FAIL, "more than one $name");
            }
            return;
        }
        if (@devices == 1) {
            if ($mode eq "disconnect") {
                if (!$devices[0]->usb || $devices[0]->offline) {
                    $state->adb_output(UNCOUNTED, "");
                    return;
                }
                if (defined $id) {
                    # implement transport-id wait via serial
                    $serial = $devices[0]->serial;
                    $type = "serial";
                }
            } elsif ($devices[0]->online) {
                $state->adb_output(UNCOUNTED, "");
                return;
            }
        } elsif ($mode eq "disconnect") {
            $state->adb_output(UNCOUNTED, "");
            return;
        }
        # No online devices. Become a waiter
        $state->{transport} = 0;
        $listener->{device_events}{$state->{key}} = $state;
        $state->{on_device_event} = \&waiter;
        $state->{wait_type}   = $type;
        $state->{wait_mode}   = $mode;
        $state->{wait_serial} = $serial;
        # Currently don't have a strategy for read. Works badly for now
        # $state->{socket}->delete_read;
    } elsif ($command =~ m{^(transport|tport):(any|usb|tcp|local|serial:(.*))}) {
        # host-local:tport:usb gets you usb
        # host-usb:tport:local gets you local
        # host-serial:0715f712da553032:tport:<anything> gets you that usb serial
        #  EXCEPT
        # host-serial:0715f712da553032:tport:serial:10.253.0.11:5555 gets local
        # host-transport-id:7:tport:<anything> gets you that transport id
        # host-transport-id:7:tport:serial:10.253.0.11:5555 still transport id
        # host:tport:transport-id:7 doesn't exist as valid syntax
        my $tport = $1 eq "tport";
        my $type = $2 || $type;
        $serial = $3 // $serial;
        my @devices = $listener->{devices}->transport($type, $id, $serial);
        if (@devices == 1) {
            if (!$devices[0]->offline) {
                # Pass through to device. Leave connection open
                $state->{transport} = $devices[0];
                $state->adb_output(UNCOUNTED, $tport ? $state->{transport}->packed_id : "", 1);
            } else {
                my $offline = $devices[0]->state;
                $state->adb_output(FAIL, "device $offline");
            }
        } elsif (@devices) {
            my $name = transport_type_name($type, 0);
            $state->adb_output(FAIL, "more than one $name");
        } elsif (defined $id) {
            $state->adb_output(FAIL, "no device with transport id '$id'");
        } elsif (defined $serial) {
            $state->adb_output(FAIL, "device '$serial' not found");
        } else {
            # on adb v39 this leaves the connection open, on v41 it closes
            my $name = transport_type_name($type, 1);
            $state->adb_output(FAIL, "no $name found", 1);
        }
    } elsif ($command =~ m{^connect:(.*?)(?::(\d+))?\z}as) {
        my $host = $1;
        my $port = $2 || 5555;
        # Real ADB does name resolution
        my $serial = "$host:$port";
        # For the real adb if it could make the connection but not talk the
        # device it is added in state "offline".
        # I didn't bother to implement an example of that.
        if ($listener->{devices}->get($serial)) {
            $state->adb_output(FAIL, "already connected to $serial");
        } elsif ($listener->device_add($serial)) {
            $state->adb_output(OKAY, "connected to $serial");
        } else {
            # Several kinds of other connect and resolution errors are possible
            $state->adb_output(FAIL, "failed to connect to '$serial': Connection refused");
        }
    } elsif ($command =~ m{^disconnect:((.*?)(?::(\d+))?)\z}as) {
        my $name = $1;
        my $host = $2;
        my $port = $3 || 5555;
        # Real ADB does name resolution
        my $serial = "$host:$port";
        if (my $device = $listener->{devices}->get($serial)) {
            $state->adb_output(OKAY, "disconnected $name");
            # AFTER adb_output since this can close $state
            $device->drop;
        } else {
            $state->adb_output(FAIL, "no such device '$serial'");
        }
    } else {
        $state->adb_output(FAIL, "unknown host service '$command'");
    }
}

sub command_transporter {
    my ($state, $command) = @_;

    my $device = $state->{transport};
    my $listener = $state->{listener};
    if ($command =~ /^reboot:(.*)\z/) {
        my $type = $1;
        # Real devices dont care. They reboot for every argument
        if ($type =~ /^(?:bootloader|recovery|sideload|sideload-auto-reboot|)\z/) {
            # We could now waste a bit of time before coming back
            # No need to be so realistic though
            $state->adb_output(UNCOUNTED, "");
            $state->{transport} = 0;
            $device->reconnect($type || "device");
        } else {
            $state->adb_output(FAIL, "Unknown reboot type");
        }
    } elsif ($command eq "root:") {
        if ($device->root) {
            $state->adb_output(UNCOUNTED, "adbd is already running as root\n");
        } else {
            $state->adb_output(UNCOUNTED, "restarting adbd as root\n");
            $state->{transport} = 0;
            $device = $device->reconnect;
            $device->root(1);
        }
    } elsif ($command eq "unroot:") {
        if ($device->root) {
            $state->adb_output(UNCOUNTED, "restarting adbd as non root\n");
            $state->{transport} = 0;
            # Reconnect will create a new device without root
            $device->reconnect;
        } else {
            $state->adb_output(UNCOUNTED, "adbd not running as root\n");
        }
    } elsif ($command eq "enable-verity:" || $command eq "disable-verity:") {
        $state->adb_output(UNCOUNTED, "");
    } elsif ($command eq "remount:") {
        if ($device->root) {
            $state->adb_output(UNCOUNTED, "remount succeeded\n");
        } else {
            $state->adb_output(UNCOUNTED, "Not running as root. Try \"adb root\" first.\n");
        }
    } else {
        $state->adb_output(FAIL, "closed");
    }
}

# Non standard adb commands for testing
sub command_internal {
    my ($state, $command) = @_;

    my $listener = $state->{listener};
    if ($command =~ m{^echo:(.*)\z}s) {
        # Fake command for response testing
        $state->adb_output(OKAY, $1);
    } elsif ($command eq "pid") {
        # Fake command: identify running process
        $state->adb_output(OKAY, $$);
    } elsif ($command eq "argv") {
        # Fake command: Show commandline
        $state->adb_output(OKAY, join("\0", @argv_old));
    } elsif (my ($serial) = $command =~ m{^device_add:(.*)\z}s) {
        # Fake command: Add device
        my $serial = $1;
        if ($listener->{devices}->get($serial)) {
            $state->adb_output(FAIL, "Already have device $serial");
        } elsif (!$devices{$serial}) {
            $state->adb_output(FAIL, "Unknown device $serial");
        } else {
            $listener->device_add($serial);
            # Send result
            $state->adb_output(OKAY, "Added '$serial'", 1);
        }
    } elsif (($serial) = $command =~ m{^device_drop:(.*)\z}s) {
        # Fake command: Drop device
        my $serial = $1;
        if (my $device = $listener->{devices}->get($serial)) {
            # Send result
            $state->adb_output(OKAY, "Dropped '$serial'", 1);
            # AFTER adb_output since this can close $state
            $device->set_offline;
            $device->drop;
        } else {
            $state->adb_output(FAIL, "No such device");
        }
    } elsif ($command =~ m{^discard:}) {
        # Fake command: identify running process
        $state->adb_output(UNCOUNTED, "discarded", 1);
    } else {
        $command = display_string($command);
        $state->adb_output(FAIL, "unknown internal command $command");
    }
}

# For host:track-devices
sub tracker {
    my ($state) = @_;

    my $listener = $state->{listener};
    my $str = $listener->{devices}->string;
    $str = sprintf("%04X", length $str) . $str;
    $state->output($str);
}

# For host:wait-for-any-device
sub waiter {
    my ($state, $device, $state_old, $state_new) = @_;
    # info("waiter  ($state->{id}):\t$device->{serial}: $state_old -> $state_new\t(Wait for $state->{wait_type} $state->{wait_mode})");

    my $disconnect = $state->{wait_mode} eq "disconnect";
    $state_new eq $state->{wait_mode} || $disconnect || return;

    if (defined $state->{wait_serial}) {
        # Wrong device
        return if $device->{serial} ne $state->{wait_serial};
        return if $state->{wait_mode} eq "disconnect" &&
            !($state_new eq "offline" || $state_new eq "");
    } else {
        return if $state->{wait_type} eq "usb" && !$device->usb;
        if ($state->{wait_mode} eq "disconnect") {
            # The device we are waiting on is a single usb device that is
            # not offline, there were no other devices.matching wait_type
            # (in *ANY* state) and the wait_type is either "usb" or "any"
            # (otherwise this waiter would not have started)
            # Since we just checked the device versus wait_type usb we know
            # the current device is a match for wait_type
            # (the $state_old eq "offline" case should be impossible)
            return unless $state_new eq "offline" || $state_new eq "" ||
                $state_old eq "" || $state_old eq "offline";
        } elsif ($state->{wait_type} eq "local" && $device->usb) {
            return;
        }
    }
    # info("waiter  ($state->{id}):\tTrigger");

    my $listener = $state->{listener};
    delete $listener->{device_events}{$state->{key}};
    $state->{on_device_event} = undef;
    $state->adb_output(UNCOUNTED, "");
}

package Listener;
use Scalar::Util qw(weaken);

sub DESTROY {
    # print STDERR "DESTROY(@_)\n";
    my ($listener) = @_;

    # Rescue sockets so they will get closed by the final _exit
    push @sockets, $listener->{socket} if $finish;
    $listener->{type} == ::UNACCEPTABLE ||
        $listener->{type} == ::UNREACHABLE ||
        $listener->{socket}->delete_read;

    --$listening;
}

sub next_id {
    my ($listener) = @_;

    return sprintf("%s:%03d", $listener->{port}, ++$listener->{ids});
}

sub device_add {
    my ($listener, $serial) = @_;

    my $device = $listener->{devices}->add($serial) || return undef;
    $device->{state} = "";
    $device->set_offline;
    $device->set_online;
    return $device;
}

sub close {
    my $listener = shift // return;
    # Early test makes sure that the final socket closes get done by _exit
    # This makes sure that if the client sees EOF the process is actually gone
    if (keys %listeners == 1) {
        ::finish();
    } else {
        delete $listeners{$listener->{key}};
        $listener = undef;
    }
}

sub devices_init {
    my ($listener) = @_;

    my $devices = bless {
        transport_ids	=> 0,
        devices		=> {},
        listener	=> $listener,
    }, "Devices";
    weaken($devices->{listener});
    for my $serial (@init_devices) {
        $devices->add($serial);
    }
    $listener->{devices} = $devices;
}

package Device;
use Carp;
use Scalar::Util qw(weaken);

sub new {
    my ($class, $devices, $serial, $state, $description, $features) = @_;

    ++$nr_devices;
    my $device = bless {
        devices		=> $devices,
        serial		=> $serial,
        transport_id	=> $devices->next_id,
        state		=> $state,
        description	=> $description,
        features	=> $features,
        root		=> 0,
    }, $class;
    weaken($device->{devices});
    return $device;
}

sub transport_id {
    return shift->{transport_id} if @_ <= 1;
    my $device = shift;
    $device->{transport_id} = shift;
}

sub packed_id {
    return pack("q", shift->transport_id);
}

sub serial {
    return shift->{serial};
}

sub state {
    return shift->{state} if @_ <= 1;

    my ($device, $state_new) = @_;

    my $state_old = $device->{state};
    return if $state_old eq $state_new;
    $device->{state} = $state_new;
    for my $state (values %{$device->listener->{device_events}}) {
        $state->{on_device_event}->($state, $device, $state_old, $state_new);
    }
}

sub set_offline {
    my ($device) = @_;

    $device->state("offline");
}

sub set_online {
    my ($device) = @_;

    $device->state("device");
}

sub reconnect {
    my ($device, $state) = @_;

    $state ||= $device->state;
    my $serial = $device->serial;
    $device->set_offline;
    $device->drop;

    $device = $device->{devices}->add($serial) ||
        croak "Cannot reconnect '$serial'";
    $device->{state} = "";
    $device->set_offline;
    $device->state($state);
    return $device;
}

sub root {
    return shift->{root} if @_ <= 1;

    my $device = shift;
    $device->{root} = shift ? 1 : 0;
}

# Notice that offline and online are not opposites.
# There also might be a "no device" state (I've never seen it though)
sub offline {
    return shift->{state} eq "offline";
}

sub online {
    return shift->{state} eq "device";
}

sub listener {
    return shift->{devices}->listener;
}

sub drop {
    my ($device) = @_;

    $device->{devices}->drop($device);
}

sub string {
    my ($device) = @_;

    return join "\t", @$device{qw(serial state)};
}

sub string_long {
    my ($device) = @_;

    return join("\t", @$device{qw(serial state description)}) . " transport_id:$device->{transport_id}";
}

sub features_string {
    my ($device) = @_;

    return join "," => @{$device->{features}};
}

sub usb {
    my ($device) = @_;

    return $device->{description} =~ m{(?:^| )(usb:\S+)} ? $1 : undef;
}

sub DESTROY {
    --$nr_devices;
}

package Devices;
use Carp;
# use ADB::Client::Utils qw(info);

sub add {
    my ($devices, $serial) = @_;

    die "Duplicate device $serial" if $devices->{devices}{$serial};
    my $device = Device->new($devices, $serial,
                             @{$devices{$serial} || return undef});
    $devices->{devices}{$serial} = $device;
    return $device;
}

sub drop {
    my ($devices, $device) = @_;

    my $serial = $device->serial;
    delete $devices->{devices}{$serial} || croak "Unknown serial '$serial'";

    my $listener = $devices->listener;
    for my $state (values %{$listener->{device_events}}) {
        $state->{on_device_event}->($state, $device, $device->state, "");
    }

    # Close all acepted connections that use this device as transport
    for my $state (values %{$listener->{accepted}}) {
        $state->adb_close if $state->{transport} == $device;
    }
}

sub next_id {
    return ++shift->{transport_ids};
}

sub listener {
    return shift->{listener};
}

sub count {
    return scalar keys %{shift->{devices}};
}

sub string {
    return join "" => map $_->string . "\n" => shift->all;
}

sub string_long {
    return join "" => map $_->string_long . "\n" => shift->all;
}

sub all {
    my ($devices) = @_;

    return @{$devices->{devices}}{sort keys %{$devices->{devices}}};
}

sub all_online {
    return grep $_->online => shift->all;
}

sub get {
    my ($devices, $serial) = @_;

    return $devices->{devices}{$serial};
}

sub transport {
    my ($devices, $type, $id, $serial, $device) = @_;

    if (defined $id) {
        return grep $_->transport_id eq $id => $devices->all
    } elsif (defined $serial) {
        return $devices->get($serial) // ();
    } elsif ($type eq "any" || $type eq "") {
        return $device if $device;
        return $devices->all;
    } elsif ($type eq "tcp") {
        return $devices->all;
    } elsif ($type eq "usb") {
        return grep $_->usb => $devices->all;
    } elsif ($type eq "local") {
        return grep !$_->usb => $devices->all;
    } else {
        die "Invlid transort type '$type'";
    }
}

sub dumper {
    my ($devices, $msg) = @_;

    local $devices->{listener} = "<listener>";
    $msg ||= "Devices";
    print STDERR ::dumper($msg, $devices);
}

package main;
event_init();
$idle_timer = unidle();
eval { main() };
if ($@) {
    select(STDERR);
    $| = 1;
    print $@;
    _exit(255);
}
_exit(0);
