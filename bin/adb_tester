#!/usr/bin/perl -w
# Very simple program to manually tak to an ADB server
# useful to better understand the protocol
use strict;
use warnings;

our $VERSION = "1.000";

use FindBin qw($Script);
our $Bin;

# If the program runs as /foobar/bin/program, find libraries in /foobar/lib
BEGIN {
    # Even on windows FindBin uses / in the reported path
    $Bin = $FindBin::Bin;
    $Bin =~ s{/+\z}{};
    $Bin =~
        ($^O eq "MSWin32" ?
         qr{^((?:[A-Z]:)?(?:/[a-zA-Z0-9_:.~ -]+)*)/[a-zA-Z0-9_.-]+/*\z} :
         qr{^((?:/[a-zA-Z0-9_:.-]+)*)/[a-zA-Z0-9_.-]+/*\z}) ||
         die "Could not parse bin directory '$Bin'";
    # Use untainted version of lib
    require lib;
    # Support a simple --blib option for pre-install testing
    "lib"->import(@ARGV && $ARGV[0] eq "--blib" ? shift && "$1/blib/lib" : "$1/lib");
}

use Errno qw(EAGAIN EINTR EWOULDBLOCK);
use IO::Socket::IP qw();
use Getopt::Long 2.24 qw(:config bundling);

use ADB::Client::Events qw(mainloop event_init);
use ADB::Client::Utils qw(string_from_value);

my $host = "127.0.0.1";
my $port = 5037;

die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("host|h=s"	=> \$host,
               "port|p=s"	=> \$port,
           );

my $socket = IO::Socket::IP->new(
    PeerHost => $host,
    PeerPort => $port) || die "Could not connect to $host:$port: $@";
print "Connected to $host:$port\n";

my $command_in = "";
my $command_out = "";
my $socket_out = "";

sub unstring {
    my $str = string_from_value(shift);
    $str =~ s/^"//;
    $str =~ s/"\z//;
    return $str;
}

sub socket_writer {
    my $rc = syswrite($socket, $socket_out, 2**16);
    if ($rc) {
        substr($socket_out, 0, $rc, "");
        $socket->delete_write() if $socket_out eq "";
        return;
    }
    die "Length 0 write" if defined $rc;
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    die "Error writing to socket: $^E";
}

sub command_reader {
    my $rc = sysread(STDIN, my $buffer, 2**16);
    if ($rc) {
        $command_in .= $buffer;
        while ($command_in =~ s/(.*)\n//) {
            my $line = $1;
            # $line =~ s/^\s+//;
            # $line =~ s/\s+\z//;
            next if $line eq "";
            utf8::downgrade($line);
            my $len = length $line;
            die "Line too long" if $len >= 2**16;
            $socket->add_write(\&socket_writer) if $socket_out eq "";
            $line = sprintf("%04x", $len) . $line;
            print "-> adb\n$line\n";
            $socket_out .= $line;
        }
        return;
    }
    exit if defined $rc;
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    die "Error reading from STDIN: $^E";
}

sub socket_reader {
    my $rc = sysread($socket, my $buffer, 2**16);
    if ($rc) {
        $buffer = unstring($buffer);
        print "<- adb\n$buffer\n";
        return;
    }
    if (defined $rc) {
        print "<- adb: Close\n";
        $socket->delete_read;
        $socket->delete_write if $socket_out ne "";

        $socket = IO::Socket::IP->new(
            PeerHost => $host,
            PeerPort => $port) || die "Could not connect to $host:$port: $@";
        $socket->blocking(0);
        $socket_out = "";
        $socket->add_read(\&socket_reader);
        print "-> adb: Connect\n";
        return;
    }
    return if $! == EAGAIN || $! == EINTR || $! == EWOULDBLOCK;
    die "Error reading from socket: $^E";
}

event_init;
STDIN->blocking(0);
(\*STDIN)->add_read(\&command_reader);
$socket->blocking(0);
$socket->add_read(\&socket_reader);
mainloop();
